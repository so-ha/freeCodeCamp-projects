1. The let keyword behaves similarly(like var), but with some extra features. 
When you declare a variable with the let keyword inside a block, statement, or expression, its scope is limited to that block, statement, or expression.

2. const has all the awesome features that let has, with the added bonus that variables declared using const are read-only. 
They are a constant value, which means that once a variable is assigned with const, it cannot be reassigned.

3. NOTE:
It is common for developers to use uppercase variable identifiers for immutable values and lowercase or camelCase for mutable values (objects and arrays). 

4. objects (including arrays and functions) assigned to a variable using const are still mutable. 
Using the const declaration only prevents reassignment of the "variable identifier".
const s = [5, 6, 7];
s = [1, 2, 3]; // throws error, trying to assign a const
s[2] = 45; // works just as it would with an array declared with var or let
console.log(s); // returns [5, 6, 45]

5. const declaration alone doesn't really protect your data from mutation. 
To ensure your data doesn't change,  JavaScript provides a function Object.freeze to prevent data mutation.
Once the object is frozen, you can no longer add, update, or delete properties from it. 
Any attempt at changing the object will be rejected without an error.

let obj = {
  name:"FreeCodeCamp",
  review:"Awesome"
};
Object.freeze(obj);
obj.review = "bad"; // will be ignored. Mutation not allowed

6. In JavaScript, we often don't need to name our functions, especially when passing a function as an argument to another function. 
Instead, we create inline functions. We don't need to name these functions because we do not reuse them anywhere else.
const myFunc = function() {
  const myVar = "value";
  return myVar;
}
ES6 provides us with the syntactic sugar to not have to write anonymous functions this way. Instead, you can use arrow function syntax:

const myFunc = () => {
  const myVar = "value";
  return myVar;
}
When there is no function body, and only a return value, arrow function syntax allows you to omit the keyword return as well as the brackets surrounding the code. 
This helps simplify smaller functions into one-line statements:
const myFunc = () => "value";

7. In order to help us create more flexible functions, ES6 introduces default parameters for functions.

Check out this code:

const greeting = (name = "Anonymous") => "Hello " + name; //"Anonymous"  is a default value for name

8. In order to help us create more flexible functions, ES6 introduces the rest parameter for function parameters. 
With the rest parameter, you can create functions that take a variable number of arguments. 
These arguments are stored in an array that can be accessed later from inside the function.

function howMany(...args) { // (...args) is the rest parameter
  return "You have passed " + args.length + " arguments.";
}
The rest parameter eliminates the need to check the args array and allows us to apply map(), filter() and reduce() on the parameters array.

9. var arr = [6, 89, 3, 45];
var maximus = Math.max.apply(null, arr); // returns 89 
Math.max(arr) returns NaN;
const arr = [6, 89, 3, 45];
const maximus = Math.max(...arr); // returns 89
...arr returns an unpacked array. In other words, it spreads the array.
However, the spread operator only works in-place, like in an argument to a function or in an array literal. The following code will not work:
const spreaded = ...arr; // will throw a syntax error 

const arr1 = ["JAN", "FEB", "MAR", "APR", "MAY"];
let arr2;
(function() {
  "use strict";
  arr2 = [...arr1]; // Unpacking the arr1 using the spread operator and then copying those values to arr2
})();
console.log(arr2);

10. Destructuring assignment is special syntax introduced in ES6, for neatly assigning values taken directly from an object.

Consider the following ES5 code:

const user = { name: 'John Doe', age: 34 };
const name1 = user.name; // name = 'John Doe'
const age1 = user.age; // age = 34

Here's an equivalent assignment statement using the ES6 destructuring syntax:

const { name1, age1 } = user;
// name = 'John Doe', age = 34

For nested objects :

const LOCAL_FORECAST = {
  yesterday: { low: 61, high: 75 },
  today: { low: 64, high: 77 },
  tomorrow: { low: 68, high: 80 }
};
const { today: {low : lowToday, high:  highToday}} = LOCAL_FORECAST;

11. ES6 makes destructuring arrays as easy as destructuring objects.

One key difference between the spread operator and array destructuring is that the spread operator unpacks all contents of an array into a comma-separated list. 
Consequently, you cannot pick or choose which elements you want to assign to variables.

Destructuring an array lets us do exactly that:

const [a, b] = [1, 2, 3, 4, 5, 6];
console.log(a, b); // 1, 2
The variable a is assigned the first value of the array, and b is assigned the second value of the array. 
We can also access the value at any index in an array with destructuring by using commas to reach the desired index:

const [a, b,,, c] = [1, 2, 3, 4, 5, 6];
console.log(a, b, c); // 1, 2, 5
To swap values of a & b:
let a = 8, b = 6;
[a, b] = [b, a];

12. In some situations involving array destructuring, we might want to collect the rest of the elements into a separate array.

The result is similar to Array.prototype.slice(), as shown below:

const [a, b, ...arr] = [1, 2, 3, 4, 5, 7];
console.log(a, b); // 1, 2
console.log(arr); // [3, 4, 5, 7]

13. A new feature of ES6 is the template literal. This is a special type of string that makes creating complex strings easier.

Template literals allow you to create multi-line strings and to use string interpolation features to create strings.

Consider the code below:

const person = {
  name: "Zodiac Hasbro",
  age: 56
};

// Template literal with multi-line and string interpolation
const greeting = `Hello, my name is ${person.name}!
I am ${person.age} years old.`;

console.log(greeting); // prints
// Hello, my name is Zodiac Hasbro!
// I am 56 years old.
A lot of things happened there. Firstly, the example uses backticks (`), not quotes (' or "), to wrap the string. 
Secondly, notice that the string is multi-line, both in the code and the output. This saves inserting \n within strings. 
The ${variable} syntax used above is a placeholder. 
Basically, you won't have to use concatenation with the + operator anymore. 
To add variables to strings, you just drop the variable in a template string and wrap it with ${ and }. 
Similarly, you can include other expressions in your string literal, for example ${a + b}. 
This new way of creating strings gives you more flexibility to create robust strings.

14. With ES6, You can remove the function keyword and colon altogether when defining functions in objects. 
Here's an example of this syntax:

const person = {
  name: "Taylor",
  sayHello() {
    return `Hello! My name is ${this.name}.`;
  }
};

15. ES6 provides a new syntax to create objects, using the class keyword.

It should be noted that the class syntax is just syntax, and not a full-fledged class-based implementation of an object-oriented paradigm, 
unlike in languages such as Java, Python, Ruby, etc.

In ES5, we usually define a constructor function and use the new keyword to instantiate an object.

var SpaceShuttle = function(targetPlanet){
  this.targetPlanet = targetPlanet;
}
var zeus = new SpaceShuttle('Jupiter');
The class syntax simply replaces the constructor function creation:

class SpaceShuttle {
  constructor(targetPlanet) {
    this.targetPlanet = targetPlanet;
  }
}
const zeus = new SpaceShuttle('Jupiter');
It should be noted that the class keyword declares a new function, to which a constructor is added. 
This constructor is invoked when new is called to create a new object.

16. Getter functions are meant to simply return (get) the value of an object's private variable to the user without the user directly accessing the private variable.

Setter functions are meant to modify (set) the value of an object's private variable based on the value passed into the setter function. 
This change could involve calculations, or even overwriting the previous value completely.


class Book {
  constructor(author) {
    this._author = author;
  }
  // getter
  get writer() {
    return this._author;
  }
  // setter
  set writer(updatedAuthor) {
    this._author = updatedAuthor;
  }
}
const lol = new Book('anonymous');
console.log(lol.writer);  // anonymous
lol.writer = 'wut';
console.log(lol.writer);  // wut
Notice the syntax used to invoke the getter and setter. They do not even look like functions. 
Getters and setters are important because they hide internal implementation details. 
Note: It is convention to precede the name of a private variable with an underscore (_). 
However, the practice itself does not make a variable private.

17. You want to use this function in several different JavaScript files. 
In order to share it with these other files, you first need to export it.

export const add = (x, y) => {
  return x + y;
}
The above is a common way to export a single function, but you can achieve the same thing like this:

const add = (x, y) => {
  return x + y;
}

export { add };
When you export a variable or function, you can import it in another file and use it without having to rewrite the code. 
You can export multiple things by repeating the first example for each thing you want to export, 
or by placing them all in the export statement of the second example, like this:

export { add, subtract };
There is another export syntax you need to know, known as export default. Usually you will use this syntax if only one value is being exported from a file. 
It is also used to create a fallback value for a file or module. 
Since export default is used to declare a fallback value for a module or file, you can only have one value be a default export in each module or file. 
Additionally, you cannot use export default with var, let, or const
export default function add(x, y) {
  return x + y;
}

18. import allows you to choose which parts of a file or module to load. 
In the previous lesson, the examples exported add from the math_functions.js file. Here's how you can import it to use in another file:

import { add } from './math_functions.js';
Here, import will find add in math_functions.js, import just that function for you to use, and ignore the rest. 
The ./ tells the import to look for the math_functions.js file in the same folder as the current file. 
The relative file path (./) and file extension (.js) are required when using import in this way.

You can import more than one item from the file by adding them in the import statement like this:

import { add, subtract } from './math_functions.js';
To import a default export, you need to use a different import syntax. 
In the following example, add is the default export of the math_functions.js file. 
Here is how to import it:

import add from "./math_functions.js";
The syntax differs in one key place. The imported value, add, is not surrounded by curly braces ({}). 
add here is simply a variable name for whatever the default export of the math_functions.js file is. 
You can use any name here when importing a default.

19. A promise in JavaScript is exactly what it sounds like - you use it to make a promise to do something, usually asynchronously. 
When the task completes, you either fulfill your promise or fail to do so. 
Promise is a constructor function, so you need to use the new keyword to create one. 
It takes a function, as its argument, with two parameters - resolve and reject. 
These are methods used to determine the outcome of the promise. 
The syntax looks like this:

const myPromise = new Promise((resolve, reject) => {

}); 

20. A promise has three states: pending, fulfilled, and rejected. 
The promise you created in the last challenge is forever stuck in the pending state because you did not add a way to complete the promise. 
The resolve and reject parameters given to the promise argument are used to do this. 
resolve is used when you want your promise to succeed, and reject is used when you want it to fail. 
These are methods that take an argument, as seen below.

const myPromise = new Promise((resolve, reject) => {
  if(condition here) {
    resolve("Promise was fulfilled");
  } else {
    reject("Promise was rejected");
  }
});
The example above uses strings for the argument of these functions, but it can really be anything. 
Often, it might be an object, that you would use data from, to put on your website or elsewhere.

21. Promises are most useful when you have a process that takes an unknown amount of time in your code (i.e. something asynchronous), often a server request. 
When you make a server request it takes some amount of time, and after it completes you usually want to do something with the response from the server. 
This can be achieved by using the then method. The then method is executed immediately after your promise is fulfilled with resolve. 
Here’s an example:

myPromise.then(result => {
  // do something with the result.
});
result comes from the argument given to the resolve method.

catch is the method used when your promise has been rejected. It is executed immediately after a promise's reject method is called. 
Here’s the syntax:

myPromise.catch(error => {
  // do something with the error.
});
error is the argument passed in to the reject method.

Note: the then and catch methods can be chained to the promise declaration if you choose.

