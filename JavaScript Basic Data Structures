1. array 
array.length
array.shift();
array.unshift();
array.push();
array.pop();
array.splice() - 
	splice() allows us to do just that: remove any number of consecutive elements from anywhere in an array.

	splice() can take up to 3 parameters, but for now, we'll focus on just the first 2. 
	The first two parameters of splice() are integers which represent indexes, or positions, of the array that splice() is being called upon.
	And remember, arrays are zero-indexed, so to indicate the first element of an array, we would use 0. 
	splice()'s first parameter represents the index on the array from which to begin removing elements, while the second parameter indicates the number of elements to delete. 
	For example:
	let array = ['today', 'was', 'not', 'so', 'great'];
	array.splice(2, 2);
	// remove 2 elements beginning with the 3rd element
	// array now equals ['today', 'was', 'great']
	splice() not only modifies the array it's being called on, but it also returns a new array containing the value of the removed elements:
	let array = ['I', 'am', 'feeling', 'really', 'happy'];
	let newArray = array.splice(3, 2);
	// newArray equals ['really', 'happy']

	Well, you can use the third parameter, comprised of one or more element(s), to add to the array. 
	This can be incredibly useful for quickly switching out an element, or a set of elements, for another.

	const numbers = [10, 11, 12, 12, 15];
	const startIndex = 3;
	const amountToDelete = 1;

	numbers.splice(startIndex, amountToDelete, 13, 14);
	// the second entry of 12 is removed, and we add 13 and 14 at the same index
	console.log(numbers);
	// returns [ 10, 11, 12, 13, 14, 15 ]
	Here we begin with an array of numbers. We then pass the following to splice(). 
	The index at which to begin deleting elements (3), the number of elements to be deleted (1), and the elements (13, 14) to be inserted at that same index. 
	Note that there can be any number of elements (separated by commas) following amountToDelete, each of which gets inserted.
	array.slice()
	Rather than modifying an array, slice() copies or extracts a given number of elements to a new array, leaving the array it is called upon untouched. slice() takes only 2 parameters â€” the first is the index at which to begin extraction, and the second is the index at which to stop extraction (extraction will occur up to, but not including the element at this index). Consider this:
	let weatherConditions = ['rain', 'snow', 'sleet', 'hail', 'clear'];
	let todaysWeather = weatherConditions.slice(1, 3);
	// todaysWeather equals ['snow', 'sleet'];
	// weatherConditions still equals ['rain', 'snow', 'sleet', 'hail', 'clear']
	In effect, we have created a new array by extracting elements from an existing array.
spread(...) operator
	we can use the spread operator to copy an array like so:
	let thisArray = [true, true, undefined, false, null];
	let thatArray = [...thisArray];
	// thatArray equals [true, true, undefined, false, null]
	// thisArray remains unchanged, and is identical to thatArray
	Another huge advantage of the spread operator, is the ability to combine arrays, or to insert all the elements of one array into another, at any index. With more traditional syntaxes, we can concatenate arrays, but this only allows us to combine arrays at the end of one, and at the start of another. Spread syntax makes the following operation extremely simple:
	let thisArray = ['sage', 'rosemary', 'parsley', 'thyme'];
	let thatArray = ['basil', 'cilantro', ...thisArray, 'coriander'];
	// thatArray now equals ['basil', 'cilantro', 'sage', 'rosemary', 'parsley', 'thyme', 'coriander']
	Using spread syntax, we have just achieved an operation that would have been more complex and more verbose had we used traditional methods.
array.indexOf()
	indexOf(), that allows us to quickly and easily check for the presence of an element on an array. indexOf() takes an element as a parameter, and when called, it returns the position, or index, of that element, or -1 if the element does not exist on the array.

2. Objects are key-value stores which provide a flexible, intuitive way to structure data, and, they provide very fast lookup time.
	obj['hi'] = 'world';

	obj.count = 1;

	delete obj.count;

	what if we just wanted to know if an object has a specific property? JavaScript provides us with two different ways to do this. One uses the hasOwnProperty() method and the other uses the in keyword. If we have an object users with a property of Alan, we could check for its presence in either of the following ways:
	users.hasOwnProperty('Alan');
	'Alan' in users;
	// both return true

	Sometimes you may need to iterate through all the keys within an object. This requires a specific syntax in JavaScript called a for...in statement. For our users object, this could look like:
	for (let user in users) {
	  console.log(user);
	}
	// logs:
	Alan
	Jeff
	Sarah
	Ryan
	Objects do not maintain an ordering to stored keys like arrays do; thus a key's position on an object, or the relative order in which it appears, is irrelevant when referencing or accessing that key.

	We can also generate an array which contains all the keys stored in an object using the Object.keys() method and passing in an object as the argument. 
	This will return an array with strings representing each property in the object. Again, there will be no specific order to the entries in the array.
	Object.keys(obj);
